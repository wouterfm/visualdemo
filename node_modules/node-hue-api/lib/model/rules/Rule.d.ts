export = Rule;
declare const Rule_base: typeof import("../BridgeObjectWithId");
declare class Rule extends Rule_base {
    constructor(id: any);
    _conditions: any[];
    _actions: any[];
    set name(arg: any);
    get name(): any;
    get created(): any;
    get owner(): any;
    get lasttriggered(): any;
    get timestriggered(): any;
    get status(): any;
    set recycle(arg: any);
    get recycle(): any;
    get conditions(): any[];
    addCondition(condition: any): {
        _conditions: any[];
        _actions: any[];
        name: any;
        readonly created: any;
        readonly owner: any;
        readonly lasttriggered: any;
        readonly timestriggered: any;
        readonly status: any;
        recycle: any;
        readonly conditions: any[];
        addCondition(condition: any): any;
        removeConditionAt(idx: any): void;
        resetConditions(): void;
        readonly actions: any[];
        addAction(action: any): any;
        removeActionAt(idx: any): void;
        resetActions(): void;
        getConditionsPayload(): any[];
        getActionsPayload(): any[];
        toStringDetailed(): string;
        _populate(data: any): any;
        getHuePayload(): Object;
        getJsonPayload(): Object;
        readonly id: string | number;
        _attributes: {};
        _data: {};
        getAttributeValue(name: string): any;
        setAttributeValue(name: string, value: any): import("../BridgeObject");
        toString(): string;
        readonly _bridgeData: any;
        _populationData: any;
    };
    removeConditionAt(idx: any): void;
    resetConditions(): void;
    get actions(): any[];
    addAction(action: any): {
        _conditions: any[];
        _actions: any[];
        name: any;
        readonly created: any;
        readonly owner: any;
        readonly lasttriggered: any;
        readonly timestriggered: any;
        readonly status: any;
        recycle: any;
        readonly conditions: any[];
        addCondition(condition: any): any;
        removeConditionAt(idx: any): void;
        resetConditions(): void;
        readonly actions: any[];
        addAction(action: any): any;
        removeActionAt(idx: any): void;
        resetActions(): void;
        getConditionsPayload(): any[];
        getActionsPayload(): any[];
        toStringDetailed(): string;
        _populate(data: any): any;
        getHuePayload(): Object;
        getJsonPayload(): Object;
        readonly id: string | number;
        _attributes: {};
        _data: {};
        getAttributeValue(name: string): any;
        setAttributeValue(name: string, value: any): import("../BridgeObject");
        toString(): string;
        readonly _bridgeData: any;
        _populationData: any;
    };
    removeActionAt(idx: any): void;
    resetActions(): void;
    getConditionsPayload(): any[];
    getActionsPayload(): any[];
    _populate(data: any): {
        _conditions: any[];
        _actions: any[];
        name: any;
        readonly created: any;
        readonly owner: any;
        readonly lasttriggered: any;
        readonly timestriggered: any;
        readonly status: any;
        recycle: any;
        readonly conditions: any[];
        addCondition(condition: any): any;
        removeConditionAt(idx: any): void;
        resetConditions(): void;
        readonly actions: any[];
        addAction(action: any): any;
        removeActionAt(idx: any): void;
        resetActions(): void;
        getConditionsPayload(): any[];
        getActionsPayload(): any[];
        toStringDetailed(): string;
        _populate(data: any): any;
        getHuePayload(): Object;
        getJsonPayload(): Object;
        readonly id: string | number;
        _attributes: {};
        _data: {};
        getAttributeValue(name: string): any;
        setAttributeValue(name: string, value: any): import("../BridgeObject");
        toString(): string;
        readonly _bridgeData: any;
        _populationData: any;
    };
}
