export = BridgeObject;
declare class BridgeObject {
    /**
     * @param attributes {Array.<Type>}
     */
    constructor(attributes: import("../types/Type.js")[]);
    _attributes: {};
    _data: {};
    /**
     * @param name {string}
     * @returns {*}
     */
    getAttributeValue(name: string): any;
    /**
     * @param name {string}
     * @param value {*}
     * @returns {BridgeObject}
     */
    setAttributeValue(name: string, value: any): import("./BridgeObject.js");
    /**
     * @returns {string}
     */
    toString(): string;
    /**
     * @returns {string}
     */
    toStringDetailed(): string;
    /**
     * Obtains a node-hue-api specific JSON payload of the BridgeObject. This can be used for serialization purposes.
     *
     * This functionality exists to support use cases where server backends need to send data to a web based client to
     * work around CORS or custom backend functionality, whilst preserving and providing reusability of the API objects.
     *
     * @returns {Object} A node-hue-api specific payload that represents the Bridge Object, this can be reconstructed into
     * a valid BridgeObject instance via the model.createFromJson() function.
     */
    getJsonPayload(): Object;
    /**
     * Obtains a Hue API compatible representation of the Bridge Object that can be used over the RESTful API.
     * @returns {Object} The payload that is compatible with the Hue RESTful API documentation.
     */
    getHuePayload(): Object;
    /**
     * @returns {any | {}}
     * @private
     */
    private get _bridgeData();
    /**
     * @param data {*}
     * @returns {BridgeObject}
     * @private
     */
    private _populate;
    _populationData: any;
}
declare namespace BridgeObject {
    export { Type };
}
type Type = import("../types/Type.js");
