export = ResourceLink;
declare const ResourceLink_base: typeof import("./BridgeObjectWithId");
declare class ResourceLink extends ResourceLink_base {
    constructor(id: any);
    set name(arg: any);
    get name(): any;
    set description(arg: any);
    get description(): any;
    get type(): any;
    set classid(arg: any);
    get classid(): any;
    get owner(): any;
    set recycle(arg: any);
    get recycle(): any;
    get links(): any;
    resetLinks(): {
        name: any;
        description: any;
        readonly type: any;
        classid: any;
        readonly owner: any;
        recycle: any;
        readonly links: any;
        resetLinks(): any;
        _links: {} | undefined;
        addLink(type: any, id: any): any;
        removeLink(type: any, id: any): any;
        toStringDetailed(): string;
        getJsonPayload(): Object;
        getHuePayload(): Object;
        /**
         * @param data {*}
         * @private
         */
        _populate(data: any): any;
        readonly id: string | number;
        _attributes: {};
        _data: {};
        getAttributeValue(name: string): any;
        setAttributeValue(name: string, value: any): import("./BridgeObject");
        toString(): string;
        readonly _bridgeData: any;
        _populationData: any;
    };
    _links: {} | undefined;
    addLink(type: any, id: any): {
        name: any;
        description: any;
        readonly type: any;
        classid: any;
        readonly owner: any;
        recycle: any;
        readonly links: any;
        resetLinks(): any;
        _links: {} | undefined;
        addLink(type: any, id: any): any;
        removeLink(type: any, id: any): any;
        toStringDetailed(): string;
        getJsonPayload(): Object;
        getHuePayload(): Object;
        /**
         * @param data {*}
         * @private
         */
        _populate(data: any): any;
        readonly id: string | number;
        _attributes: {};
        _data: {};
        getAttributeValue(name: string): any;
        setAttributeValue(name: string, value: any): import("./BridgeObject");
        toString(): string;
        readonly _bridgeData: any;
        _populationData: any;
    };
    removeLink(type: any, id: any): {
        name: any;
        description: any;
        readonly type: any;
        classid: any;
        readonly owner: any;
        recycle: any;
        readonly links: any;
        resetLinks(): any;
        _links: {} | undefined;
        addLink(type: any, id: any): any;
        removeLink(type: any, id: any): any;
        toStringDetailed(): string;
        getJsonPayload(): Object;
        getHuePayload(): Object;
        /**
         * @param data {*}
         * @private
         */
        _populate(data: any): any;
        readonly id: string | number;
        _attributes: {};
        _data: {};
        getAttributeValue(name: string): any;
        setAttributeValue(name: string, value: any): import("./BridgeObject");
        toString(): string;
        readonly _bridgeData: any;
        _populationData: any;
    };
    /**
     * @param data {*}
     * @private
     */
    private _populate;
}
