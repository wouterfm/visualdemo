export = HueApiConfig;
declare class HueApiConfig {
    constructor(config: any, transport: any, remoteApi: any);
    _config: any;
    _remoteApi: any;
    _transport: any;
    _isRemote: boolean;
    /**
     * Is the connection to the hue bridge remote.
     * @returns {boolean}
     */
    get isRemote(): boolean;
    /**
     * Gets the transport implementation that is used to conenct with the Hue Bridge
     * @returns {Object}
     */
    get transport(): Object;
    /**
     * Gets the remote API in use that was used to bootstrap the remote connection.
     * @returns {RemoteApi}*
     * @throws ApiError if the connection is local network.
     */
    get remote(): import("./http/RemoteApi");
    /**
     * Gets the current username used to connect/interact with the Hue Bridge.
     * @returns {String} The bridge username.
     */
    get username(): string;
    /**
     * Gets the client id for the remote OAuth connection.
     * @returns {String} The clientId for the remote connection
     * @throws ApiError if the connection is not remote.
     */
    get clientId(): string;
    /**
     * Gets the client secret for the remote OAuth connection.
     * @returns {String} The client secret for the remote connection.
     * @throws ApiError if the connection is not remote.
     */
    get clientSecret(): string;
    /**
     * The Base URL for communication with the bridge.
     * @returns {String} The base URL for the hue bridge.
     */
    get baseUrl(): string;
    /**
     * Gets the client key for the entertainment API/streaming endpoints
     * @returns {String}
     * @throws ApiError if the connection is not local network.
     */
    get clientKey(): string;
    /**
     * Gets the current access token.
     * @returns {String}
     * @throws ApiError if the connection is not remote.
     */
    get accessToken(): string;
    /**
     * Gets the expiry timestamp of the access token.
     * @returns {number} The timestamp for the expiry or -1 if not known
     */
    get accessTokenExpiry(): number;
    /**
     * Gets the current refresh token.
     * @returns {String}
     * @throws ApiError if the connection is not remote.
     */
    get refreshToken(): string;
    /**
     * Gets the expiry timestamp of the refresh token.
     * @returns {number} The timestamp for the expiry or -1 if not known
     */
    get refreshTokenExpiry(): number;
    _requireRemote(): void;
    _requireLocal(): void;
}
declare namespace HueApiConfig {
    export { RemoteApi };
}
type RemoteApi = import("./http/RemoteApi");
