export = Sensors;
declare const Sensors_base: {
    new (hueApi: any): import("./http/ApiDefinition");
};
declare class Sensors extends Sensors_base {
    constructor(hueApi: any);
    /**
     * Gets all the sesnors from the bridge
     * @returns {Promise<Sensor[]>}
     */
    getAll(): Promise<import("../model/sensors/Sensor")[]>;
    /**
     * @deprecated use getSensor(id) instead
     * @param id {string | Sensor}
     * @returns {Promise<Sensor>}
     */
    get(id: string | import("../model/sensors/Sensor")): Promise<import("../model/sensors/Sensor")>;
    /**
     * @param id {string | Sensor}
     * @returns {Promise<Sensor>}
     */
    getSensor(id: string | import("../model/sensors/Sensor")): Promise<import("../model/sensors/Sensor")>;
    /**
     * Starts a search for new ZigBee sensors
     * @returns {Promise<boolean>}
     */
    searchForNew(): Promise<boolean>;
    /**
     * Obtains the new sesnors that were found from the previous search for new sensors
     * @returns {Promise<Sensor>}.
     */
    getNew(): Promise<import("../model/sensors/Sensor")>;
    /**
     * Will update the name attribute of the Sensor on the Bridge.
     * @param sensor { Sensor } The Sensor with the update to the name applied
     * @returns {Promise<Boolean>}
     */
    renameSensor(sensor: import("../model/sensors/Sensor")): Promise<boolean>;
    /**
     * @deprecated use renameSensor(sensor) instead
     * @param id {String | Sensor} The id or the Sensor instance to update
     * @returns {Promise<Boolean>}
     */
    updateName(id: string | import("../model/sensors/Sensor"), name: any): Promise<boolean>;
    /**
     * Creates a new Sensor (CLIP based)
     * @param sensor {Sensor} The CLIP Sensor that you wish to create.
     * @returns {Promise<Sensor>}
     */
    createSensor(sensor: import("../model/sensors/Sensor")): Promise<import("../model/sensors/Sensor")>;
    /**
     * Deletes a sensor from the Bridge
     * @param id {string | Sensor} The id or Sensor instance to remove from the bridge
     * @returns {Promise<Boolean>}
     */
    deleteSensor(id: string | import("../model/sensors/Sensor")): Promise<boolean>;
    /**
     * Will update the configuration attributes of the Sensor in the bridge.
     * @param sensor {Sensor}
     * @returns {Promise<Object>}
     */
    updateSensorConfig(sensor: import("../model/sensors/Sensor")): Promise<Object>;
    /**
     * Will update the state attributes of the Sensor in the bridge.
     * @param sensor {Sensor}
     * @param limitToStateNames {String[]} optional list of state attributes to limit the update to (should not be needed in practice, was added to get around a bug).
     * @returns {Promise<Object>}
     */
    updateSensorState(sensor: import("../model/sensors/Sensor"), limitToStateNames: string[]): Promise<Object>;
}
declare namespace Sensors {
    export { Sensor };
}
type Sensor = import("../model/sensors/Sensor");
