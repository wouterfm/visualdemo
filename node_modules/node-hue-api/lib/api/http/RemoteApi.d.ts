export = RemoteApi;
declare class RemoteApi {
    constructor(clientId: any, clientSecret: any);
    _config: {
        clientId: any;
        clientSecret: any;
        baseUrl: string;
    };
    _tokens: import("./OAuthTokens");
    /**
     * Get the clientID for the connection.
     * @returns {String} The clientID of the remote connection.
     */
    get clientId(): string;
    /**
     * Gets the clientSecret value for the connection.
     * @returns {String} THe client secret for the remote connection.
     */
    get clientSecret(): string;
    /**
     * Gets the base URL for the connection.
     * @returns {string}
     */
    get baseUrl(): string;
    /**
     * Gets the Access Token for the remote connection
     * @returns {String} The access token.
     */
    get accessToken(): string;
    /**
     * Gets the expiry timestamp value for the expiry of the access token.
     * @returns {number|null|undefined}
     */
    get accessTokenExpiry(): number | null | undefined;
    /**
     * Gets the Refresh Token for the remote connection, that can be exchanged for new refreshed tokens
     * @returns {String} The refresh token.
     */
    get refreshToken(): string;
    /**
     * Gets the expiry timestamp value for the expiry of the refresh token.
     * @returns {number|null|undefined}
     */
    get refreshTokenExpiry(): number | null | undefined;
    /**
     * Sets the access token for the remote connection
     * @param {String} token The access token.
     * @param {number=} expiry The timestamp value of the expiry of the access token, optional
     * @returns {RemoteApi}
     */
    setAccessToken(token: string, expiry?: number | undefined): import("./RemoteApi");
    /**
     * Sets the refresh token for the remote connection
     * @param {String} token The refresh token.
     * @param {number=} expiry The timestamp value of the expiry of the refresh token, optional
     * @returns {RemoteApi}
     */
    setRefreshToken(token: string, expiry?: number | undefined): import("./RemoteApi");
    /**
     * Builds the digest response to pass to the remote API for the provided request details.
     * @param {String} realm
     * @param {String} nonce
     * @param {String} method HTTP method for the request
     * @param {String} path The path for the request
     * @returns {String} The digest hash value for the provided data
     */
    getDigestResponse(realm: string, nonce: string, method: string, path: string): string;
    /**
     * Constructs the digest authorization header value from the provided details.
     * @param {String} realm
     * @param {String} nonce
     * @param {String} method
     * @param {String} path
     * @returns {string} The value to be used for the "Authorization" Header.
     */
    getAuthorizationHeaderDigest(realm: string, nonce: string, method: string, path: string): string;
    /**
     * Constructs the basic authorization header value from the provided details.
     *
     * This is really poor for security, it is only included to complete the implementation of the APIs, you are strongly
     * advised to use the digest authorization instead.
  
     * @returns {string} The value to be used for the "Authorization" Header.
     */
    getAuthorizationHeaderBasic(): string;
    /**
     * Exchanges the code for OAuth tokens.
     * @param code The authorization code that is provided as part of the OAuth flow.
     * @returns {Promise<OAuthTokens>} The OAuth Tokens obtained from the remote portal.
     */
    getToken(code: any): Promise<import("./OAuthTokens")>;
    /**
     * Refreshes the existing tokens by exchangin the current refresh token for new access and refresh tokens.
     *
     * After calling this the old tokens will no longer be valid. The new tokens obtained will be injected back into the
     * API for future calls.
     *
     * You should ensure you save the new tokens in place of the previous ones that you used to establish the original
     * remote connection.
     *
     * @param refreshToken The refresh token to exchange for new tokens.
     * @returns {Promise<OAuthTokens>} The new refreshed tokens.
     */
    refreshTokens(refreshToken: any): Promise<import("./OAuthTokens")>;
    /**
     * Creates a new remote user
     * @param {number=} remoteBridgeId The id of the hue bridge in the remote portal, usually 0.
     * @param {String=} deviceType The user device type identifier (this is shown to the end users on the remote access portal). If not specified will default to 'node-hue-api-remote'.
     * @returns {Promise<String>} The new remote username.
     */
    createRemoteUsername(remoteBridgeId?: number | undefined, deviceType?: string | undefined): Promise<string>;
    /** @private */
    private _respondWithDigest;
    /** @private */
    private _processTokens;
}
declare namespace RemoteApi {
    export { OAuthTokens };
}
type OAuthTokens = import("./OAuthTokens");
