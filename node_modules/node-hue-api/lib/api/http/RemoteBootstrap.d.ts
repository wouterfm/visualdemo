export = RemoteBootstrap;
declare class RemoteBootstrap {
    constructor(clientId: any, clientSecret: any);
    clientId: any;
    clientSecret: any;
    remoteApi: import("./RemoteApi");
    /**
     * Obtains the AuthCode URL that can be used to request OAuth tokens for your user/application details
     * @param {String} deviceId The device ID of the remote application.
     * @param {String} appId The application ID of the remote application.
     * @param {String} state A unique state value that will be provided back to you in the reponse payload to prevent against cross-site forgeries.
     * @returns {string} The URL that can be used to start the exchange for OAuth tokens.
     */
    getAuthCodeUrl(deviceId: string, appId: string, state: string): string;
    /**
     * Connects to the Remote API using the provided access code, exchanging it for valid OAuth tokens that can be used
     * to connect again in the future.
     *
     * This function is used to bootstrap the first connection to the remote API for a new application.
     *
     * @param {String} code The authorization code obtained from the callback made by the remote portal to your application
     * @param {String=} username The username for the remote application.
     * @param {number=} timeout The timeout for the access token request to the remote API, defaults to 12 seconds
     * @param {String=} deviceType The device type for the application connection.
     * @param {number=} remoteBridgeId The id of the bridge in the remote portal, defaults to 0.
     * @returns {Promise<Api>}
     */
    connectWithCode(code: string, username?: string | undefined, timeout?: number | undefined, deviceType?: string | undefined, remoteBridgeId?: number | undefined): Promise<import("../Api")>;
    /**
     * Connects to the Remote API using the provided OAuth tokens that were previously obtained.
     * @param {String} accessToken The OAuth access token.
     * @param {String} refreshToken The OAuth refresh token.
     * @param {String=} username The remote username used to connect with hue bridge
     * @param {number=} timeout The timeout for the access token request to the remote API, defaults to 12 seconds
     * @param {String=} deviceType The device type for the application connection.
     * @returns {Promise<Api>}
     */
    connectWithTokens(accessToken: string, refreshToken: string, username?: string | undefined, timeout?: number | undefined, deviceType?: string | undefined): Promise<import("../Api")>;
    /** @private */
    private _getRemoteApi;
}
