export = Api;
declare class Api {
    constructor(config: any, transport: any, remote: any);
    /** @returns {Capabilities} */
    get capabilities(): import("./Capabilities");
    /** @returns {Configuration} */
    get configuration(): import("./Configuration");
    /** @returns {Lights} */
    get lights(): import("./Lights");
    /** @returns {Groups} */
    get groups(): import("./Groups");
    /** @returns {Sensors} */
    get sensors(): import("./Sensors");
    /** @returns {Schedules} */
    get schedules(): import("./Schedules");
    /** @returns {Scenes} */
    get scenes(): import("./Scenes");
    /** @returns {Users} */
    get users(): import("./Users");
    /** @returns {Rules} */
    get rules(): import("./Rules");
    /** @returns {ResourceLinks} */
    get resourceLinks(): import("./ResourceLinks");
    /**
     * Obtains the remote API endpoints, this will only be present if you have a remote connection established.
     * @returns {Remote|null|undefined}
     */
    get remote(): import("./Remote") | null | undefined;
    /**
     * Obtains the previously cached state that was obtained from the bridge.
     * @returns {Promise<Cache>}
     */
    getCachedState(): Promise<import("./Cache")>;
    /**
     * Checks to see if the API is still syncing with the Hue bridge.
     * @returns {boolean}
     */
    isSyncing(): boolean;
    /**
     * The timestamp of the last sync for the cached state.
     * @returns {number}
     */
    getLastSyncTime(): number;
    /**
     * Performs an async synchronization activity with the hue bridge to cache the state of things like lights, etc...
     */
    syncWithBridge(): void;
    /**
     * Fetches the light for the specified id from the cached state.
     * @param {number|string} id The id of the light to fetch from the cached state.
     * @returns {Promise<Light>}
     */
    getLightDefinition(id: string | number): Promise<any>;
    _getConfig(): any;
    _getTransport(): any;
    _getRemote(): any;
}
declare namespace Api {
    export { Light, Cache };
}
type Light = any;
type Cache = import("./Cache");
