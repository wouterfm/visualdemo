export = Lights;
declare const Lights_base: {
    new (hueApi: any): import("./http/ApiDefinition");
};
declare class Lights extends Lights_base {
    constructor(hueApi: any);
    _lightStateLimiter: any;
    /**
     * Gets all the Lights from the Bridge
     * @returns {Promise<Array<import('../model/Light')>>}
     */
    getAll(): Promise<any[]>;
    /**
     * Get a specific Light from the Bridge.
     * @param id {number | Light} The id or Light instance to get from the Bridge.
     * @returns {Promise<Light>}
     */
    getLight(id: any): Promise<any>;
    /**
     * @deprecated since 4.0. Use getLight(id) instead.
     * @param id {number} The ide of the light to get.
     * @returns {Promise<Light>}
     */
    getLightById(id: number): Promise<any>;
    /**
     * Retrieves a Light from the Bridge by name.
     * @param name {string} The name of the light to get.
     * @returns {Promise<Array<Light>>}
     */
    getLightByName(name: string): Promise<any[]>;
    /**
     * Discovers the "new" lights detected by the Bridge.
     * @returns {Promise<Array<Light>>}
     */
    getNew(): Promise<any[]>;
    /**
     * Starts a search for "new"/undiscovered Lights by the bridge. This can take up to 30 seconds to complete.
     * @returns {Promise<boolean>}
     */
    searchForNew(): Promise<boolean>;
    /**
     * Obtains the current Attributes and State settings for the specified Light.
     * @param id {number | Light} The id or Light instance to get the attributes and state for.
     * @returns {Promise<Object>}
     */
    getLightAttributesAndState(id: any): Promise<Object>;
    /**
     * Obtains the current State settings for the specified Light.
     * @param id {number | Light} The id or Light instance to get the current state for.
     * @returns {Promise<Object>}
     */
    getLightState(id: any): Promise<Object>;
    /**
     * Sets the current state for the Light to desired settings.
     * @param id {number | Light} The id or Light instance to set the state on.
     * @param state {Object | LightState} The LightState to set on the light.
     * @returns {PromiseLike<any> | Promise<any>}
     */
    setLightState(id: any, state: any): Promise<any> | PromiseLike<any>;
    /**
     * Renames a Light on the Bridge to the specified name in the Light instance.
     * @param light {Light} The Light to rename with the new name set.
     * @returns {Promise<Boolean>}
     */
    renameLight(light: any): Promise<boolean>;
    /**
     * @deprecated since 4.x, use renameLight(light) instead
     * @param id {int} The Light to rename.
     * @param name {string} The new name.
     * @returns {Promise}
     */
    rename(id: any, name: string, ...args: any[]): Promise<any>;
    /**
     * Deletes a Light from the Hue Bridge
     * @param id { number | Light} The id or Light instance to be deleted
     * @returns {Promise<boolean>}
     */
    deleteLight(id: any): Promise<boolean>;
    _setLightState(id: any, state: any, device: any): any;
}
