export = Remote;
declare class Remote {
    constructor(hueApi: any);
    _hueApi: any;
    /**
     * Exchanges the code for a token on the remote API.
     * @param code The code to exchange for a new token.
     * @returns {String} The token from the remote API.
     */
    getToken(code: any): string;
    /**
     * Will refresh the OAuth tokens on the remote API, exchaning the existing ones for new ones.
     * @returns {Object} An object containing the new access and refresh tokens.
     */
    refreshTokens(): Object;
    /**
     * Creates a new remote user for the Hue Bridge.
     *
     * @param remoteBridgeId {String} The is of the hue bridge on the remote portal
     * @param deviceType {String} The user device type identifier.
     */
    createRemoteUser(remoteBridgeId: string, deviceType: string): any;
    /**
     * @typedef {Object} RemoteAccessCredentials
     * @property {String} cientId
     * @property {String} clientSecret
     * @property {Object} tokens
     * @property {Object} [tokens.access]
     * @property {String} tokens.access.value
     * @property {String} tokens.access.expiresAt
     * @property {Object} [tokens.refresh]
     * @property {String} tokens.refresh.value
     * @property {String} tokens.refresh.expiresAt
     * @property {String} username
     */
    /**
     * Obtains the remote access credentials that are in use for the remote connection.
     * @returns {RemoteAccessCredentials}
     */
    getRemoteAccessCredentials(): {
        cientId: string;
        clientSecret: string;
        tokens: {
            access?: {
                value: string;
                expiresAt: string;
            };
            refresh?: {
                value: string;
                expiresAt: string;
            };
        };
        username: string;
    };
    /** @private */
    private _getHueApi;
    /** @private */
    private _getRemoteApi;
}
